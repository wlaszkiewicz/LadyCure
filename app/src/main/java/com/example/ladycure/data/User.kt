package com.example.ladycure.data

import com.example.ladycure.data.doctor.Doctor
import com.example.ladycure.data.doctor.Speciality

open class User(
    open val id: String,  // will be generated by firebase
    open val email: String,
    open val name: String,
    open val surname: String,
    open val dateOfBirth: String,
    open val role: Role,
    open val profilePictureUrl: String,
) {


    fun copy(
        id: String = this.id,
        email: String = this.email,
        name: String = this.name,
        surname: String = this.surname,
        dateOfBirth: String = this.dateOfBirth,
        role: Role = this.role,
        profilePictureUrl: String = this.profilePictureUrl
    ): User {
        return User(id, email, name, surname, dateOfBirth, role, profilePictureUrl)
    }

    fun toDoctor(
        speciality: Speciality = Speciality.OTHER,
        address: String = "No address provided",
        consultationPrice: Int = 100,
        rating: Double = 4.5,
        experience: Int = 5,
        languages: List<String> = listOf("English"),
        city: String = "Unknown",
        phoneNumber: String = "Unknown",
        bio: String = "No bio provided"
    ): Doctor {
        return Doctor(
            id = this.id,
            email = this.email,
            name = this.name,
            surname = this.surname,
            dateOfBirth = this.dateOfBirth,
            role = Role.DOCTOR,
            profilePictureUrl = profilePictureUrl,
            speciality = speciality,
            address = address,
            consultationPrice = consultationPrice,
            rating = rating,
            experience = experience,
            languages = languages,
            city = city,
            phoneNumber = phoneNumber,
            bio = bio
        )
    }

    companion object {
        fun fromMap(user: Map<String, Any>): User {
            val id = user["id"] as? String? ?: ""
            val email = user["email"] as? String? ?: "Error"
            val name = user["name"] as? String? ?: "Error"
            val surname = user["surname"] as? String? ?: "Error"
            val dateOfBirth = user["dob"] as? String ?: ""
            val role = Role.fromValue(user["role"] as? String? ?: "user")
            val profilePictureUrl = user["profilePictureUrl"] as? String? ?: ""

            return User(id, email, name, surname, dateOfBirth, role, profilePictureUrl)
        }

        fun empty(): User {
            return User(
                id = "",
                email = "",
                name = "",
                surname = "",
                dateOfBirth = "",
                role = Role.USER,
                profilePictureUrl = ""
            )
        }
    }
}

enum class Role(val value: String) {
    DOCTOR("doctor"),
    USER("user"),
    ADMIN("admin");

    companion object {
        fun fromValue(value: String): Role {
            return Role.entries.firstOrNull { it.value == value } ?: USER
        }

    }
}




